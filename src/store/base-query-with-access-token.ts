import {
  BaseQueryFn,
  FetchArgs,
  fetchBaseQuery,
  FetchBaseQueryError,
} from '@reduxjs/toolkit/query/react'
//import { Mutex } from 'async-mutex'

//TODO:
type RefreshTokenResponse = {
  accessToken: string
}

export const baseQueryWithAccessToken = fetchBaseQuery({
  baseUrl: process.env.NEXT_PUBLIC_API_URL,
  credentials: 'include', //TODO:
  prepareHeaders: (headers, { getState }) => {
    const token = sessionStorage.getItem('access-token')

    if (token) {
      headers.set('authorization', `Bearer ${token}`)
    }

    return headers
  },
})

export const baseQueryWithReauthWithoutMutexAsExample: BaseQueryFn<
  string | FetchArgs,
  unknown,
  FetchBaseQueryError
> = async (args, api, extraOptions) => {
  let result = await baseQueryWithAccessToken(args, api, extraOptions) // üöÄ main request, example /me or /messages

  if (
    result.error?.status === 401 ||
    (result.error?.status === 'PARSING_ERROR' && result.error?.originalStatus === 401) // ‚ùå 401 response, accessToken expired
  ) {
    try {
      const refreshResult = await baseQueryWithAccessToken(
        // üåà refresh tokens pair
        {
          url: 'auth/refresh',
          method: 'POST',
          body: {}, // Include the body if needed, e.g., { refreshToken: '...' }
        },
        api,
        extraOptions
      )

      if (refreshResult.data) {
        const data = refreshResult.data as RefreshTokenResponse

        sessionStorage.setItem('access-token', data.accessToken)
        result = await baseQueryWithAccessToken(args, api, extraOptions) // repeat üöÄ main request with fresh accesstoken

        return result // ‚úÖ success response
      } else {
        return result // ‚ùå 401 response
      }
    } catch (error) {
      console.error(error)

      return result // ‚ùå 401 response
    }
  }

  return result // some of these answers ‚ùå 400 | 500 | 200 | 201 | 403
}

// create a new mutex
// const mutex = new Mutex()

// export const baseQueryWithReauth: BaseQueryFn<
//   string | FetchArgs,
//   unknown,
//   FetchBaseQueryError
// > = async (args, api, extraOptions) => {
//   // wait until the mutex is available without locking it
//   await mutex.waitForUnlock() // –º–æ–∂–µ—Ç –∫—Ç–æ-—Ç–æ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã —Ç–æ–∫–µ–Ω–æ–≤? —è –ø–æ–¥–æ–∂–¥—É await,
//   // –∑–∞—á–µ–º –º–Ω–µ –¥–µ–ª–∞—Ç—å –∑–∞–≤–µ–¥–æ–º–æ not authorized –∑–∞–ø—Ä–æ—Å

//   // 1
//   let result = await baseQueryWithAccessToken(args, api, extraOptions) // üöÄ main request, example /me or /messages

//   if (result.error?.status === 401 || result.error?.originalStatus === 401) {
//     console.log('baseQueryWithReauth: NEED REAUTH: ' + args)
//     // checking whether the mutex is locked
//     if (mutex.isLocked()) {
//       // wait until the mutex is available without locking it
//       await mutex.waitForUnlock()
//       return baseQueryWithAccessToken(args, api, extraOptions) // –∏–ª–∏ ‚ùå –∏–ª–∏ ‚úÖ
//     } else {
//       // –ø–æ–∫–∞ —è –¥–µ–ª–∞–ª —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å, –∫—Ç–æ-—Ç–æ –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å mutex
//       const release = await mutex.acquire() // üîí –±–ª–æ–∫–∏—Ä—É–µ–º mutex
//       try {
//         const refreshResult = await baseQueryWithAccessToken(
//           {
//             url: 'auth/refresh',
//             method: 'POST',
//             body: {}, // Include the body if needed, e.g., { refreshToken: '...' }
//           },
//           api,
//           extraOptions
//         )
//         if (refreshResult.data) {
//           // @ts-ignore
//           sessionStorage.setItem('access-token', refreshResult.data.accessToken)
//           return await baseQueryWithAccessToken(args, api, extraOptions)
//         } else {
//           // api.dispatch(loggedOut())
//           // posiible scenario if refresh —Ç–æ–∫–µ–Ω —Ç–æ–∂–µ –∫–æ—Ä–æ—Ç–∫–æ–∂–∏–≤—É—â–∏–π –∏ –≤–∫–ª–∞–¥–∫–∞ –¥–æ–ª–≥–æ –æ—Ç–∫—Ä—ã—Ç–∞, —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º—ë—Ç
//           // –∫–Ω–æ–ø–∫—É, –∞ —É –Ω–µ–≥–æ –ø—Ä–æ—Ç—É—Ö –∏ –∞–∫–∫—Å—Å–µ–µ –∏ —Ä–µ—Ñ—Ä–µ—à, —Ç–æ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω—É–∂–Ω–æ —è–≤–Ω–æ –µ–≥–æ –≤—ã–ª–æ–≥–∏–Ω–∏—Ç—å (–∑–∞—á–∏—Å—Ç–∏—Ç—å auth –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å—Ç–µ–π—Ç–µ)
//         }
//       } catch (error) {
//         console.error(error)
//       } finally {
//         // release must be called once the mutex should be released again.
//         release()
//       }
//     }
//   }
//   // 2
//   return result
// }
